Visualização de dados
========================================================
author: Felipe S. M. Barros
date: 12/03/2018
autosize: true

Trabalhando con gráficos
========================================================

Temas

- gráficos básicos
- ggplot2

Carregando dados (data.frame)
========================================================

```{r}
mpg <- read.csv("mpg.csv")
head(mpg)
```

Parâmetros básicos
========================================================

```{r}
?read_csv
```

De que se tratam?
========================================================

```{r}
# manufacturer
# model
# displ = engine displacement, in litres (size)
# year = year of manufacture
# cyl = number of cylinders
# trans = type of transmission
# drv = f = front-wheel drive, r = rear wheel drive, 4 = 4wd
# cty = city miles per gallon
# hwy = highway miles per gallon
# fl = fuel type
# class = "type" of car
```

Pergunta:
========================================================
## Carros pequenos são mais eficientes?
### Como poderíamos ver isso com um gráfico de dispersão?

Resposta:
========================================================
```{r}
plot(mpg$displ, mpg$hwy)
```

Vamos melhorar o gráfico?
========================================================
Vamos usar a biblioteca `ggplot`; 

que nos permite criar gráficos de forma mais intutiva e com estética mais interessante;  
```{r}
# Instalando biblioteca
# install.packages('ggplot2')

# Carregando biblioteca
library(ggplot2)
```

Como usar o ggplot?
========================================================
O `ggplot` trabalha com camadas. A primeira que criamos é a base do gráfico, onde informamos que datos serão usados (neste caso `mpg`):  
`ggplot(data = mpg)`  

A essa camada base se adicionam outras camadas/informações (por isso o uso do `+`);
Um exemplo é a informação da geometria a ser usada (pontos, linhas, etc) e a estética (aparência) a ser dada:  
`geom_point(mapping = aes(x = displ, y = hwy))`

Como usar o ggplot II?
========================================================
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

Como alterar a estética (cor por clase)?
========================================================
Uma vez que temos definido a geometria (dispersão = geom_point()), podemos agregar outras variáveis para melhorar o gráfico.  

Por exemplo, podemos fazer com que os pontos tenham cores diferentes para cada valor relacionad aà variável classes do carro.  
```{r}
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, colour = class))
```

Como alterar a estética (forma por clase)?
========================================================
Assim como fizemos com a cor, podemos alterar a forma do ponto de acordo com a classe.
Como você acha que seria isso?

Como alterar a estética (forma por clase) II ?
========================================================
```{r}
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

Como alterar a estética (color) ?
========================================================
Que resultado teremos com o comando abaixo?

```{r, eval=FALSE}
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy) , colour = "red")


ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy) , shape = 6)
```

Exercícios I
========================================================
Que resultados teremos com o código a seguir?  
```{r, eval = F}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
```

Exercícios I (resposta)
========================================================
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
```
O que há de errado nesse comando?  

Exercício II
========================================================
Que resultados teremos com o código a seguir?  
```{r, eval=FALSE}
# O que acontece ao usar uma variavel continua como cor?
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = cty))

# E no tamanho?

# E no formato?

# Como a estética muda com a variavel categorica/contínua?
```

Uma variável para vários parametros estéticos
========================================================
Podemos usar uma mesma variavel para distintos elementos estéticos, como no exemplo:  
Como ficará o gráfico?
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = cty, color = cty))
```

Estética com relação lógica
========================================================
Podemos definir diferentes cores para uma operação lógica, como no exemplo:
Como vocês imagina que fica o gráfico?  
  
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, colour = displ < 5))
```

Estética com relação lógica
========================================================
E neste caso?
```{r, eval= TRUE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, colour = displ < 5 | hwy < 20))
```

Dividindo en distintos gráficos
========================================================
`ggplot` nos permite dividir um gráfico em função de uma variable categórica, usando a função `facet_warp()`  
  
* O primeiro argumento de facet_warp deve ser a formula a qual se deve dividir os gráficos. No exemplo a seguir, a divisão será feita em função da variável `class`;  

```{r, eval = FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_wrap(~class)
```

Dividindo os gráficos de acordo com duas variáveis
=========================================================
Para dividir os gráficos em função de duas variáveis, devemos usar a função `facet_grid`  
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(drv ~ cyl)
```

Exercício III:
===========================================================
  
- E se usarmos uma variável contínua na função `facet_warp`? Faz sentido?
- Quais são as vantagens em se utilizar `facet`?  
- E quais são as desvanragens? 

```{r, eval=FALSE}
head(mpg)
```

Exercício III (resposta):
===========================================================

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_wrap(~cty)
```

Outros tipos de gráficos
===========================================================
Para fazermos outros tipos de gráficos, além do grico dde dispersão, vamos usar outras geometrias (`geom_*`) do `ggplot`:

Por exemplo:  
`geom_smooth` (**suavizador**)
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

Parâmetros estéticos
===========================================================
Muitas vevzes os parâmetros estéticos (que são declarados em `aes()`), são so mesmos.   
**Mas nem sempre**  

Com `smooth` não temos o parâmetro `shape`, mas sim, se pode usar o `linetype`.  

**Como ficaria  seguinte gráfico?**
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```

Gráficos com mais de uma geometria:
============================================================
Como o gplot` trabalha com camadas, podemos agregar diferentes geometrias a um mesmo gráfico.  
**Como você imagina que possamos fazer isso?**  

Exemplo:  
- Como podemos fazer para adicionar ao gráfico de dispersão uma camada mais com o `smooth` mostrando a tendencia suavizada e a variação?

Gráficos com mais de uma geometría II:
============================================================
ps. para mais informações sobre o `smooth`, veja: `?smooth`.  

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

Gráficos com mais de uma geometría III:
============================================================
Perceba que estamos repetindo alguns elementos estéticos...  
**Será que podemos melhorar, removendo a redundância?**  

**E se fizermos assim:**
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```

Gráficos com mais de uma geometría IV:
=============================================================
E se quisermos que os ponos estejam relacionados a classe de carros?
**Atenção:** Só os pontos!  
**Como ficaria o código para fazer dito gráfico?**  

Gráficos com mais de uma geometría IV (resposta):
=============================================================
```{r}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(aes(colour = class)) + 
  geom_smooth()
```

Exercícios IV:
================================================================
Que gráfico produzirá o código abaixo? Há alguma coisa nova nele? Do que se trata?  
```{r, eval=FALSE}
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_point() + 
  geom_smooth(se = FALSE)
```

Exercícios V:
================================================================
Esses códigos produzirão gráficos diferentes?  
```{r, eval=FALSE}
# Grafico 1
ggplot() + 
  geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
# Grafico 2
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(aes(colour = class)) + 
  geom_smooth()
```

Exercícios VI:
================================================================
Como você reproduziria esse gráfico?  
  
![](./img/Graficos.png)

Exercícios VII:
==============================================================
Que outras geometrias poderíamos usar para fazer:  
- boxplot?  
- histogram?  
- gráfico de barras?  

Exercícios VII (resposta):
==============================================================
```{r, eval=FALSE}
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot()
ggplot(data = mpg, mapping = aes(x = hwy)) + 
  geom_histogram()
ggplot(data = mpg, mapping = aes(x = class)) + 
  geom_bar()
```

Barplot e Histogram
================================================================
Os **gráficos de barra**, **boxplot** e **histograma** são exemplos interessantes de como o `ggplot` nos facilita a vida.  

Ao usarmos as geometrias `geom_bar()`, `geom_boxplot()` ou `geom_hist()`, o `gplot` faz a contagem ou a análise de frequencia automaticamente, antes de apresentar o gráfico.  
Assim como a geometria `geom_smooth()`, que ajusta uma regressão.  

```{r}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class))
```

Barplot OBS
================================================================
Caso seu dado já tenha uma variável com a contagem a ser usada num gráfico de barras, basta, então usar o `geom_col()`

Barplot parâmetros estéticos
================================================================
Que resultado teremos com os códigos a seguir?
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, colour = class))

ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, fill = class))
```

Barplot com mias de dois variáveis
==================================================================
O que acontece se criamos um gráfico de barra baseando-nos nas classes de carro, mas com as cores em função  do tipo de motor (dianteiro, traseiro ou quatro rodas)?  
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, fill = drv))
```

O parâmetro `position = "fill"`
==================================================================
Permite que se compare de forma mais eficiente as proporções:
```{r, eval=FALSE}
ggplot(data = mpg) + 
  geom_bar(mapping = aes(x = class, fill = drv), position = "fill")
```

Parâmetro "coodenadas""
==================================================================
Um argumento, ou parâmetro, que é bem importante é o `coord_flip()`:
Ele nos facilita definir a orienteção dos gráficos.  
Considerando o gráfico abaixo:  
 - Que efeito teremos se alteramos a orientação do gráfico?  
 - Como poderíamos fazer isso?  

```{r}
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + 
  geom_boxplot()
```

Gráfico Polar
===================================================================
A função `coord_polar()` nos ajuda a criar gráficos com o sistema de símbolos em formato polar.
Veja um exemplo:  
```{r}
ggplot(data = mpg)+
  geom_bar(mapping = aes(x = class, fill = class)) + coord_polar()
```

Gráfico Polar II
===================================================================
Como ficaria o gráfico se definimos que as cores devem estar em função de outra variável categórica?  
```{r, eval=FALSE}
ggplot(data = mpg)+
  geom_bar(mapping = aes(x = class, fill = drv)) + coord_polar()
```

Gráfico Polar II
===================================================================
E se usamos o parâmetro `position = "fill"`?  
```{r, eval=FALSE}
ggplot(data = mpg)+
  geom_bar(mapping = aes(x = class, fill = drv), position = 'fill') + coord_polar()
```

Resumo
===================================================================
De forma geral, vimos que `ggplot` tem uma sintaxis específica para elaborar gráficos.
Podemos resumir dessa forma:
```{r, eval=FALSE}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(
     mapping = aes(<MAPPINGS>),
     stat = <STAT>, 
     position = <POSITION>
  ) +
  <COORDINATE_FUNCTION> +
  <FACET_FUNCTION>
```

Savando o gráfico
===================================================================
Para salvar o gráfico elaborado, basta, apos os comando de criação, usar: `ggsave()`  

```{r, eval=FALSE}
ggsave("meu_grafico.png")
ggsave("meu_grafico.pdf")
```

Dados de diamantes
================================================================
Vamos fazer alguns exercícios com dados de diamantes?  
```{r}
diamonds <- read.csv('./Diamonds.csv')
head(diamonds)
```

Desafíos
================================================================
# **Desenvolver perguntas**
```{r, eval=FALSE}
ggplot(data = diamonds) + 
  geom_point(mapping = aes(x = price, y = depth)) + 
  facet_wrap(~clarity)
```